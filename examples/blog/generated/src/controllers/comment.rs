// @generated by via-core. DO NOT EDIT BY HAND.
// source: /Users/ndbroadbent/code/viaduct/examples/blog/app/resources/comments.via

use loco_rs::prelude::*;
use serde_json::json;
use crate::models::{CommentCreateParams, CommentUpdateParams};

pub const RESPOND_WITH: &[&str] = &["json"];

pub fn routes() -> Routes {
    Routes::new()
        .prefix("comments/")
        .add("/", get(index))
        .add("/{id}", get(show))
        .add("/", post(create))
        .add("/{id}", put(update))
        .add("/{id}", delete(destroy))
}

pub async fn index(State(_ctx): State<AppContext>) -> Result<Response> {
    format::json(json!({"todo": "Comment#index"}))
}

pub async fn show(State(_ctx): State<AppContext>, Path(id): Path<String>) -> Result<Response> {
    format::json(json!({"todo": "Comment#show", "id": id}))
}

pub async fn create(State(_ctx): State<AppContext>, Json(payload): Json<CommentCreateParams>) -> Result<Response> {
    format::json(json!({"todo": "Comment#create", "payload": payload}))
}

pub async fn update(State(_ctx): State<AppContext>, Path(id): Path<String>, Json(payload): Json<CommentUpdateParams>) -> Result<Response> {
    format::json(json!({"todo": "Comment#update", "id": id, "payload": payload}))
}

pub async fn destroy(State(_ctx): State<AppContext>, Path(id): Path<String>) -> Result<Response> {
    format::json(json!({"todo": "Comment#destroy", "id": id}))
}

// Associated model fields
// - body: String
// - author_name: String
// - article_id: String (UUID string; use uuid::Uuid for strong typing)
